import re, os
import telebot
import book, stickers
from string import Template
from telebot import types
import config, btn

# –†–£–°–°–ö–û–ï –ú–ï–ù–Æ
rMenu = btn.russian_menu
rMenuReg = btn.russian_menuR
# –ê–ù–ì–õ–ò–ô–°–ö–û–ï –ú–ï–ù–Æ
eMenu = btn.english_menu

bot = telebot.TeleBot(config.TOKEN)

# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_dict = {}


class User:
    def __init__(self, nickname, photo, document):
        self.nickname = nickname
        self.photo = photo
        self.document = document

        keys = book.keyReg

        for key in keys:
            self.key = None


@bot.message_handler(commands=["reg"])
def user_reg(message):
    chat_id = message.chat.id

    if message.text == '/reg':
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º: ')
        bot.register_next_step_handler(message, user_reg)
        return

    user_dict[chat_id] = User(message.text, message.photo, message.document)

    bot.send_sticker(message.chat.id, stickers.sticker)
    msg = bot.send_message(chat_id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:')
    bot.register_next_step_handler(msg, process_photo_step)


@bot.message_handler(content_types=["photo", "document"])
def process_photo_step(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]

    if message.photo:
        user.photo = message.photo[-1]
        user.photo_id = message.photo[-1].file_id
    elif message.document and message.document.mime_type in ['image/jpeg', 'image/png']:
        user.document = message.document
        user.document_id = message.document.file_id

    else:
        msg = bot.reply_to(message, '–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –ø—Ä–∏—à–ª–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ.')
        bot.register_next_step_handler(msg, process_photo_step)

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è")
    bot.register_next_step_handler(msg, process_fullname_step)


def process_fullname_step(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    user.fullname = message.text

    msg = bot.send_message(chat_id, 'üìÖ  –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –¥–µ–Ω—å –º–µ—Å—è—Ü –∏ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è! \n –Ω–∞–ø—Ä–∏–º–µ—Ä: –î–î.–ú–ú.–ì–ì–ì–ì')
    bot.register_next_step_handler(msg, process_age_step)


cli_age = []


def process_age_step(message):
    pattern = re.compile(
        '(?<!\d)(?:0?[1-9]|[12][0-9]|3[01]).(?:0?[1-9]|1[0-2])(?!\d).(?:19[0-9][0-9]|20[01][0-9])(?!\d)', re.IGNORECASE)
    is_valid = pattern.match(message.text)
    if is_valid:
        cli_age.append(message.text)

        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.age = message.text

        msg = bot.send_message(chat_id, 'üìû  –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
        bot.register_next_step_handler(msg, process_phone_step)
    else:
        msg = bot.reply_to(message, 'üòñ  –í—ã –≤–≤–µ–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        bot.register_next_step_handler(msg, process_age_step)


cli_phone = []

def process_phone_step(message):
    pattern = re.compile('^(\+)?\d+\D*\d{2}\D*\d{3}\D*\d{2}\D*\d{2}$', re.VERBOSE)
    is_valid = pattern.match(message.text.strip())
    if is_valid:
        cli_phone.append(message.text)

        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.phone = message.text

        msg = bot.send_message(chat_id, 'üìß  –í–∞—à email:')
        bot.register_next_step_handler(msg, process_email_step)

    else:
        msg = bot.reply_to(message, 'üòñ  –í—ã –≤–≤–µ–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
        bot.register_next_step_handler(msg, process_phone_step)


cli_mail = []  # –•—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –ø–æ—á—Ç—É –∑–∞—è–≤–∏—Ç–µ–ª—è

def process_email_step(message):
    pattern = re.compile('(^|\s)[-a-z0-9_.]+@([-a-z0-9]+\.)+[a-z]{2,6}(\s|$)',
                         re.IGNORECASE)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω
    is_valid = pattern.match(message.text)
    if is_valid:
        cli_mail.append(message.text)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø–æ—á—Ç—É

        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.email = message.text

        bot.send_message(chat_id, 'üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!')
        keyboard = types.InlineKeyboardMarkup()
        key_yes = types.InlineKeyboardButton(text='–î–∞ ', callback_data='yes')
        keyboard.add(key_yes)
        key_no = types.InlineKeyboardButton(text='–ù–µ—Ç ', callback_data='no')
        keyboard.add(key_no)
        bot.send_message(chat_id, getRegData(user, 'üóø  –í–∞—à –Ω–∏–∫ –Ω–µ–π–º: '), parse_mode="Markdown")
        if user.document:
            bot.send_document(chat_id, caption='–í–∞—à–µ —Ñ–æ—Ç–æ', data=user.document_id, reply_markup=keyboard)
        elif user.photo:
            bot.send_photo(chat_id, caption='–í–∞—à–µ —Ñ–æ—Ç–æ', photo=user.photo_id, reply_markup=keyboard)

    else:
        msg = bot.reply_to(message, 'üòñ  –í—ã –≤–≤–µ–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail.')
        bot.register_next_step_handler(msg, process_email_step)


def getRegData(user, title):
    t = Template(
        book.Templ
    )
    return t.substitute({
        'title': title,
        'nickname': user.nickname,
        'fullname': user.fullname,
        'age': user.age,
        'phone': user.phone,
        'email': user.email

    })


@bot.callback_query_handler(func=lambda call: call.data in ["yes", "no"])  # —Ç–µ–ø–µ—Ä—å —Ö—ç–Ω–¥–ª–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ yes –∏ no
def callback_worker(call):
    if call.data == "yes":
        bot.send_message(call.message.chat.id, "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! ")
        bot.send_sticker(call.message.chat.id, stickers.sticker8)
        bot.send_message(call.message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–ª–æ–≤–∞—Ç—å –≤ ' + call.message.from_user.first_name,
                         reply_markup=rMenuReg)


    elif call.data == "no":
        bot.send_message(call.message.chat.id, "–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑! ")
        bot.send_message(call.message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ –Ω–µ–π–º: ')
        bot.register_next_step_handler(call.message, user_reg)
